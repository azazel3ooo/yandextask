// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: grpc/grpc.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UrlsClient is the client API for Urls service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlsClient interface {
	Get(ctx context.Context, in *GetterRequest, opts ...grpc.CallOption) (*GetterResponse, error)
	Set(ctx context.Context, in *SetterRequest, opts ...grpc.CallOption) (*SetterResponse, error)
	UserUrls(ctx context.Context, in *UserUrlsRequest, opts ...grpc.CallOption) (*UserUrlsResponse, error)
	SetMany(ctx context.Context, in *SetManyRequest, opts ...grpc.CallOption) (*SetManyResponse, error)
	AsyncDelete(ctx context.Context, in *AsyncDeleteReq, opts ...grpc.CallOption) (*AsyncDeleteResp, error)
	GetStat(ctx context.Context, in *GetStatReq, opts ...grpc.CallOption) (*GetStatResp, error)
}

type urlsClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlsClient(cc grpc.ClientConnInterface) UrlsClient {
	return &urlsClient{cc}
}

func (c *urlsClient) Get(ctx context.Context, in *GetterRequest, opts ...grpc.CallOption) (*GetterResponse, error) {
	out := new(GetterResponse)
	err := c.cc.Invoke(ctx, "/grpc.Urls/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlsClient) Set(ctx context.Context, in *SetterRequest, opts ...grpc.CallOption) (*SetterResponse, error) {
	out := new(SetterResponse)
	err := c.cc.Invoke(ctx, "/grpc.Urls/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlsClient) UserUrls(ctx context.Context, in *UserUrlsRequest, opts ...grpc.CallOption) (*UserUrlsResponse, error) {
	out := new(UserUrlsResponse)
	err := c.cc.Invoke(ctx, "/grpc.Urls/UserUrls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlsClient) SetMany(ctx context.Context, in *SetManyRequest, opts ...grpc.CallOption) (*SetManyResponse, error) {
	out := new(SetManyResponse)
	err := c.cc.Invoke(ctx, "/grpc.Urls/SetMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlsClient) AsyncDelete(ctx context.Context, in *AsyncDeleteReq, opts ...grpc.CallOption) (*AsyncDeleteResp, error) {
	out := new(AsyncDeleteResp)
	err := c.cc.Invoke(ctx, "/grpc.Urls/AsyncDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlsClient) GetStat(ctx context.Context, in *GetStatReq, opts ...grpc.CallOption) (*GetStatResp, error) {
	out := new(GetStatResp)
	err := c.cc.Invoke(ctx, "/grpc.Urls/GetStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlsServer is the http_transport API for Urls service.
// All implementations must embed UnimplementedUrlsServer
// for forward compatibility
type UrlsServer interface {
	Get(context.Context, *GetterRequest) (*GetterResponse, error)
	Set(context.Context, *SetterRequest) (*SetterResponse, error)
	UserUrls(context.Context, *UserUrlsRequest) (*UserUrlsResponse, error)
	SetMany(context.Context, *SetManyRequest) (*SetManyResponse, error)
	AsyncDelete(context.Context, *AsyncDeleteReq) (*AsyncDeleteResp, error)
	GetStat(context.Context, *GetStatReq) (*GetStatResp, error)
	mustEmbedUnimplementedUrlsServer()
}

// UnimplementedUrlsServer must be embedded to have forward compatible implementations.
type UnimplementedUrlsServer struct {
}

func (UnimplementedUrlsServer) Get(context.Context, *GetterRequest) (*GetterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUrlsServer) Set(context.Context, *SetterRequest) (*SetterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedUrlsServer) UserUrls(context.Context, *UserUrlsRequest) (*UserUrlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUrls not implemented")
}
func (UnimplementedUrlsServer) SetMany(context.Context, *SetManyRequest) (*SetManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMany not implemented")
}
func (UnimplementedUrlsServer) AsyncDelete(context.Context, *AsyncDeleteReq) (*AsyncDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AsyncDelete not implemented")
}
func (UnimplementedUrlsServer) GetStat(context.Context, *GetStatReq) (*GetStatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStat not implemented")
}
func (UnimplementedUrlsServer) mustEmbedUnimplementedUrlsServer() {}

// UnsafeUrlsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlsServer will
// result in compilation errors.
type UnsafeUrlsServer interface {
	mustEmbedUnimplementedUrlsServer()
}

func RegisterUrlsServer(s grpc.ServiceRegistrar, srv UrlsServer) {
	s.RegisterService(&Urls_ServiceDesc, srv)
}

func _Urls_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Urls/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlsServer).Get(ctx, req.(*GetterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Urls_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlsServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Urls/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlsServer).Set(ctx, req.(*SetterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Urls_UserUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUrlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlsServer).UserUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Urls/UserUrls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlsServer).UserUrls(ctx, req.(*UserUrlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Urls_SetMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlsServer).SetMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Urls/SetMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlsServer).SetMany(ctx, req.(*SetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Urls_AsyncDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AsyncDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlsServer).AsyncDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Urls/AsyncDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlsServer).AsyncDelete(ctx, req.(*AsyncDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Urls_GetStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlsServer).GetStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Urls/GetStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlsServer).GetStat(ctx, req.(*GetStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Urls_ServiceDesc is the grpc.ServiceDesc for Urls service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Urls_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Urls",
	HandlerType: (*UrlsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Urls_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Urls_Set_Handler,
		},
		{
			MethodName: "UserUrls",
			Handler:    _Urls_UserUrls_Handler,
		},
		{
			MethodName: "SetMany",
			Handler:    _Urls_SetMany_Handler,
		},
		{
			MethodName: "AsyncDelete",
			Handler:    _Urls_AsyncDelete_Handler,
		},
		{
			MethodName: "GetStat",
			Handler:    _Urls_GetStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/grpc.proto",
}
